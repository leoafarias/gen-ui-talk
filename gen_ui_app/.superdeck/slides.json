{
  "config": {},
  "slides": [
    {
      "key": "YXbqWFuU",
      "options": {},
      "markdown": "{@section flex: 2}\n{@column align: center tag: heading}\n# Generative UI\n# with Flutter",
      "sections": [
        {
          "options": {
            "flex": 2
          },
          "sub_sections": [
            {
              "content": "\n# Generative UI\n# with Flutter",
              "options": {
                "align": "center",
                "tag": "heading"
              },
              "type": "column"
            }
          ]
        }
      ],
      "notes": []
    },
    {
      "key": "1bbmBfgU",
      "options": {},
      "markdown": "{@column align: center flex: 1}\n#### Leo Farias\n@leoafarias\n\n{@column align: center_right}\n- Founder/CEO/CTO\n- Open Source Contributor\n- Flutter & Dart GDE\n- Passionate about UI/UX/DX\n\n\n{@column}",
      "sections": [
        {
          "sub_sections": [
            {
              "content": "\n#### Leo Farias\n@leoafarias\n",
              "options": {
                "flex": 1,
                "align": "center"
              },
              "type": "column"
            },
            {
              "content": "\n- Founder/CEO/CTO\n- Open Source Contributor\n- Flutter & Dart GDE\n- Passionate about UI/UX/DX\n\n",
              "options": {
                "align": "center_right"
              },
              "type": "column"
            },
            {
              "content": "",
              "options": null,
              "type": "column"
            }
          ]
        }
      ],
      "notes": []
    },
    {
      "key": "eZmNG247",
      "options": {},
      "markdown": "{@column}\n\n{@column align: center_left flex: 2}\n> [!WARNING]  \n> This presentation contains live AI-generated content. Unexpected things may occur during the demonstration.\n\n{@column}",
      "sections": [
        {
          "sub_sections": [
            {
              "content": "\n",
              "options": null,
              "type": "column"
            },
            {
              "content": "\n> [!WARNING]  \n> This presentation contains live AI-generated content. Unexpected things may occur during the demonstration.\n",
              "options": {
                "flex": 2,
                "align": "center_left"
              },
              "type": "column"
            },
            {
              "content": "",
              "options": null,
              "type": "column"
            }
          ]
        }
      ],
      "notes": []
    },
    {
      "key": "0QyHrpiK",
      "options": {},
      "markdown": "{@column flex: 2 align: center_right}\n### Generative UI\n{@column}\n## VS\n{@column flex: 2}\n### AI Assisted Code Generation",
      "sections": [
        {
          "sub_sections": [
            {
              "content": "\n### Generative UI",
              "options": {
                "flex": 2,
                "align": "center_right"
              },
              "type": "column"
            },
            {
              "content": "\n## VS",
              "options": null,
              "type": "column"
            },
            {
              "content": "\n### AI Assisted Code Generation",
              "options": {
                "flex": 2
              },
              "type": "column"
            }
          ]
        }
      ],
      "notes": []
    },
    {
      "key": "4E2GOMRu",
      "options": {},
      "markdown": "### What is Generative UI?\n\n{@column}\n\n- LLMs are great at generating content based on context\n- GUIs are great at providing structured, interactive interfaces for user input and navigation",
      "sections": [
        {
          "sub_sections": [
            {
              "content": "### What is Generative UI?\n",
              "type": "column"
            },
            {
              "content": "\n\n- LLMs are great at generating content based on context\n- GUIs are great at providing structured, interactive interfaces for user input and navigation",
              "options": null,
              "type": "column"
            }
          ]
        }
      ],
      "notes": []
    },
    {
      "key": "7qVeHjc5",
      "options": {},
      "markdown": "# LLM ❤️ GUI",
      "sections": [
        {
          "sub_sections": [
            {
              "content": "# LLM ❤️ GUI",
              "type": "column"
            }
          ]
        }
      ],
      "notes": []
    },
    {
      "key": "vzQklZSA",
      "options": {},
      "markdown": "{@column}\n{@column flex: 2 align: center}\nCreates dynamic, context-aware UIs by interpreting actions and maintaining state with LLMs for fluid, interactive responses.\n\n{@column}",
      "sections": [
        {
          "sub_sections": [
            {
              "content": "",
              "options": null,
              "type": "column"
            },
            {
              "content": "\nCreates dynamic, context-aware UIs by interpreting actions and maintaining state with LLMs for fluid, interactive responses.\n",
              "options": {
                "flex": 2,
                "align": "center"
              },
              "type": "column"
            },
            {
              "content": "",
              "options": null,
              "type": "column"
            }
          ]
        }
      ],
      "notes": []
    },
    {
      "key": "hHrCdu5G",
      "options": {},
      "markdown": "### Benefits of UI over Chat\n\n- More intuitive and user-friendly, especially for complex tasks\n- Faster feedback loop between users and LLMs\n- Enhances efficiency and interaction",
      "sections": [
        {
          "sub_sections": [
            {
              "content": "### Benefits of UI over Chat\n\n- More intuitive and user-friendly, especially for complex tasks\n- Faster feedback loop between users and LLMs\n- Enhances efficiency and interaction",
              "type": "column"
            }
          ]
        }
      ],
      "notes": []
    },
    {
      "key": "AlUdXIbT",
      "options": {},
      "markdown": "{@column flex: 3 align: center}\n### Flutter is Well-Suited for Generative UI\nBuilt for any screen: Ideal for generating adaptive UIs across devices and platforms.\n{@column}",
      "sections": [
        {
          "sub_sections": [
            {
              "content": "\n### Flutter is Well-Suited for Generative UI\nBuilt for any screen: Ideal for generating adaptive UIs across devices and platforms.",
              "options": {
                "flex": 3,
                "align": "center"
              },
              "type": "column"
            },
            {
              "content": "",
              "options": null,
              "type": "column"
            }
          ]
        }
      ],
      "notes": []
    },
    {
      "key": "GDamh4hN",
      "options": {},
      "markdown": "## How can LLMs Understtand Your UI?\n\n{@column tag: image}\n![structured_output](assets/structured_output.png)",
      "sections": [
        {
          "sub_sections": [
            {
              "content": "## How can LLMs Understtand Your UI?\n",
              "type": "column"
            },
            {
              "content": "\n![structured_output](assets/structured_output.png)",
              "options": {
                "tag": "image"
              },
              "type": "column"
            }
          ]
        }
      ],
      "notes": []
    },
    {
      "key": "hi7HztOa",
      "options": {},
      "markdown": "{@column}\n\n## Structured Output\n{@column}\n\n```dart\nfinal schema = Schema.array(\n  description: 'List of recipes',\n  items: Schema.object(\n    properties: {\n      'recipeName': Schema.string(\n        description: 'Name of the recipe.',\n        nullable: false,\n      ),\n    },\n    requiredProperties: ['recipeName'],\n  ),\n);\n\nfinal model = GenerativeModel(\n  model: 'gemini-1.5-pro',\n  apiKey: apiKey,\n  generationConfig: GenerationConfig(\n    responseMimeType: 'application/json',\n    responseSchema: schema,\n  ),\n);\n\nfinal prompt = 'List a few popular cookie recipes.';\nfinal response = await model.generateContent([Content.text(prompt)]);\n\n```",
      "sections": [
        {
          "sub_sections": [
            {
              "content": "\n\n## Structured Output",
              "options": null,
              "type": "column"
            },
            {
              "content": "\n\n```dart\nfinal schema = Schema.array(\n  description: 'List of recipes',\n  items: Schema.object(\n    properties: {\n      'recipeName': Schema.string(\n        description: 'Name of the recipe.',\n        nullable: false,\n      ),\n    },\n    requiredProperties: ['recipeName'],\n  ),\n);\n\nfinal model = GenerativeModel(\n  model: 'gemini-1.5-pro',\n  apiKey: apiKey,\n  generationConfig: GenerationConfig(\n    responseMimeType: 'application/json',\n    responseSchema: schema,\n  ),\n);\n\nfinal prompt = 'List a few popular cookie recipes.';\nfinal response = await model.generateContent([Content.text(prompt)]);\n\n```",
              "options": null,
              "type": "column"
            }
          ]
        }
      ],
      "notes": []
    },
    {
      "key": "RR2DoSsC",
      "options": {},
      "markdown": "{@column}\n### Color Palette Generator\n\nGenerate a color palette based on a given text.\n\n- Name of the palette\n- Font family\n- Font color\n- Color for each corner of the palette\n\n{@column}\n```dart\nfinal schema = Schema.object(properties: {\n  'name': Schema.string(\n    description:\n        'The text content to display on color palette. Format: #FF0000',\n    nullable: false,\n  ),\n  'font': Schema.enumString(\n    enumValues: ColorPaletteFontFamily.enumString,\n    description: 'The font to use for the poster text.',\n    nullable: false,\n  ),\n  'fontColor': Schema.string(\n    description: 'The hex color value of the poster text. Format: #FF0000',\n    nullable: false,\n  ),\n  'topLeftColor': Schema.string(\n    description:\n        'The hex color value top left corner of color palette. Format: #FF0000',\n    nullable: false,\n  ),\n  'topRightColor': Schema.string(\n    description:\n        'The hex color value top right corner of color palette. Format: #FF0000',\n    nullable: false,\n  ),\n  'bottomLeftColor': Schema.string(\n    description:\n        'The hex color value bottom left corner of color palette. Format: #FF0000',\n    nullable: false,\n  ),\n  'bottomRightColor': Schema.string(\n    description:\n        'The hex color value bottom right corner of color palette. Format: #FF0000',\n    nullable: false,\n  )\n}, requiredProperties: [\n  'name',\n  'font',\n  'fontColor',\n  'topLeftColor',\n  'topRightColor',\n  'bottomLeftColor',\n  'bottomRightColor',\n]);\n\n```",
      "sections": [
        {
          "sub_sections": [
            {
              "content": "\n### Color Palette Generator\n\nGenerate a color palette based on a given text.\n\n- Name of the palette\n- Font family\n- Font color\n- Color for each corner of the palette\n",
              "options": null,
              "type": "column"
            },
            {
              "content": "\n```dart\nfinal schema = Schema.object(properties: {\n  'name': Schema.string(\n    description:\n        'The text content to display on color palette. Format: #FF0000',\n    nullable: false,\n  ),\n  'font': Schema.enumString(\n    enumValues: ColorPaletteFontFamily.enumString,\n    description: 'The font to use for the poster text.',\n    nullable: false,\n  ),\n  'fontColor': Schema.string(\n    description: 'The hex color value of the poster text. Format: #FF0000',\n    nullable: false,\n  ),\n  'topLeftColor': Schema.string(\n    description:\n        'The hex color value top left corner of color palette. Format: #FF0000',\n    nullable: false,\n  ),\n  'topRightColor': Schema.string(\n    description:\n        'The hex color value top right corner of color palette. Format: #FF0000',\n    nullable: false,\n  ),\n  'bottomLeftColor': Schema.string(\n    description:\n        'The hex color value bottom left corner of color palette. Format: #FF0000',\n    nullable: false,\n  ),\n  'bottomRightColor': Schema.string(\n    description:\n        'The hex color value bottom right corner of color palette. Format: #FF0000',\n    nullable: false,\n  )\n}, requiredProperties: [\n  'name',\n  'font',\n  'fontColor',\n  'topLeftColor',\n  'topRightColor',\n  'bottomLeftColor',\n  'bottomRightColor',\n]);\n\n```",
              "options": null,
              "type": "column"
            }
          ]
        }
      ],
      "notes": []
    },
    {
      "key": "SqCCTn73",
      "options": {
        "style": "demo"
      },
      "markdown": "{@widget name: colorPalette type: schema}",
      "sections": [
        {
          "sub_sections": [
            {
              "options": {
                "name": "colorPalette",
                "type": "schema"
              },
              "content": "",
              "type": "widget"
            }
          ]
        }
      ],
      "notes": []
    },
    {
      "key": "lxoXHEfL",
      "options": {
        "style": "demo"
      },
      "markdown": "{@widget name: colorPalette type: widget}",
      "sections": [
        {
          "sub_sections": [
            {
              "options": {
                "name": "colorPalette",
                "type": "widget"
              },
              "content": "",
              "type": "widget"
            }
          ]
        }
      ],
      "notes": []
    },
    {
      "key": "H0jUl8Aj",
      "options": {},
      "markdown": "## LLMs Orchestrate APIs",
      "sections": [
        {
          "sub_sections": [
            {
              "content": "## LLMs Orchestrate APIs",
              "type": "column"
            }
          ]
        }
      ],
      "notes": []
    },
    {
      "key": "ykwnH1Sz",
      "options": {},
      "markdown": "{@column align: center_right tag: heading flex: 3} \n### Gemini Function Calling\nThe Function Calling feature is in Beta release\n\n{@section flex: 4 tag: image}\n![llm tools](assets/llm_tools.png)",
      "sections": [
        {
          "sub_sections": [
            {
              "content": "\n### Gemini Function Calling\nThe Function Calling feature is in Beta release\n",
              "options": {
                "flex": 3,
                "align": "center_right",
                "tag": "heading"
              },
              "type": "column"
            }
          ]
        },
        {
          "options": {
            "flex": 4,
            "tag": "image"
          },
          "sub_sections": [
            {
              "content": "![llm tools](assets/llm_tools.png)",
              "type": "column"
            }
          ]
        }
      ],
      "notes": []
    },
    {
      "key": "qi1PW622",
      "options": {
        "style": "demo"
      },
      "markdown": "{@widget name: lightControl type: schema}",
      "sections": [
        {
          "sub_sections": [
            {
              "options": {
                "name": "lightControl",
                "type": "schema"
              },
              "content": "",
              "type": "widget"
            }
          ]
        }
      ],
      "notes": []
    },
    {
      "key": "UT7eHcJb",
      "options": {},
      "markdown": "{@column align: bottom_right tag: heading}\n\n### User Interaction\nNatural Language way to interact with an LLM\n\n{@column tag: image flex: 3}\n![llm response](assets/llm_interaction.png)",
      "sections": [
        {
          "sub_sections": [
            {
              "content": "\n\n### User Interaction\nNatural Language way to interact with an LLM\n",
              "options": {
                "align": "bottom_right",
                "tag": "heading"
              },
              "type": "column"
            },
            {
              "content": "\n![llm response](assets/llm_interaction.png)",
              "options": {
                "flex": 3,
                "tag": "image"
              },
              "type": "column"
            }
          ]
        }
      ],
      "notes": []
    },
    {
      "key": "MHStZ9mJ",
      "options": {},
      "markdown": "{@column align: center_left tag: heading}\n### Widget Response\n\n{@column flex: 3 tag: image}\n![widget_response](assets/widget_response.png)",
      "sections": [
        {
          "sub_sections": [
            {
              "content": "\n### Widget Response\n",
              "options": {
                "align": "center_left",
                "tag": "heading"
              },
              "type": "column"
            },
            {
              "content": "\n![widget_response](assets/widget_response.png)",
              "options": {
                "flex": 3,
                "tag": "image"
              },
              "type": "column"
            }
          ]
        }
      ],
      "notes": []
    },
    {
      "key": "ToNaJnaL",
      "options": {
        "style": "demo"
      },
      "markdown": "{@widget name: lightControl type: widget}",
      "sections": [
        {
          "sub_sections": [
            {
              "options": {
                "name": "lightControl",
                "type": "widget"
              },
              "content": "",
              "type": "widget"
            }
          ]
        }
      ],
      "notes": []
    },
    {
      "key": "pNxPyfLK",
      "options": {},
      "markdown": "## What if the tool to use is a widget schema?",
      "sections": [
        {
          "sub_sections": [
            {
              "content": "## What if the tool to use is a widget schema?",
              "type": "column"
            }
          ]
        }
      ],
      "notes": []
    },
    {
      "key": "fCc7I1oj",
      "options": {},
      "markdown": "### Experimental\n\n```dart\nfinal schema = Schema.object(properties: {\n    'textFields': Schema.array(\n      description: 'A list of text fields',\n      items: TextFieldSchemaDto.schema,\n      nullable: true,\n    ),\n    'dropdowns': Schema.array(\n      description: 'A list of dropdowns',\n      items: DropdownSchemaDto.schema,\n      nullable: true,\n    ),\n    'colorPickers': Schema.array(\n      description: 'A list of colors pickers',\n      items: ColorPickerDtoSchema.schema,\n      nullable: true,\n    ),\n  });\n```",
      "sections": [
        {
          "sub_sections": [
            {
              "content": "### Experimental\n\n```dart\nfinal schema = Schema.object(properties: {\n    'textFields': Schema.array(\n      description: 'A list of text fields',\n      items: TextFieldSchemaDto.schema,\n      nullable: true,\n    ),\n    'dropdowns': Schema.array(\n      description: 'A list of dropdowns',\n      items: DropdownSchemaDto.schema,\n      nullable: true,\n    ),\n    'colorPickers': Schema.array(\n      description: 'A list of colors pickers',\n      items: ColorPickerDtoSchema.schema,\n      nullable: true,\n    ),\n  });\n```",
              "type": "column"
            }
          ]
        }
      ],
      "notes": []
    },
    {
      "key": "wvMcrBUp",
      "options": {
        "style": "demo"
      },
      "markdown": "{@widget name: widgetSchema type: widget}",
      "sections": [
        {
          "sub_sections": [
            {
              "options": {
                "name": "widgetSchema",
                "type": "widget"
              },
              "content": "",
              "type": "widget"
            }
          ]
        }
      ],
      "notes": []
    },
    {
      "key": "5vhbdeYH",
      "options": {},
      "markdown": "## The future of UI might be orchestrating user experiences than creating it.",
      "sections": [
        {
          "sub_sections": [
            {
              "content": "## The future of UI might be orchestrating user experiences than creating it.",
              "type": "column"
            }
          ]
        }
      ],
      "notes": []
    },
    {
      "key": "UqCN11cB",
      "options": {},
      "markdown": "### Thank you\n\nLeo Farias\n@leoafarias\n(GitHub, Twitter/X)",
      "sections": [
        {
          "sub_sections": [
            {
              "content": "### Thank you\n\nLeo Farias\n@leoafarias\n(GitHub, Twitter/X)",
              "type": "column"
            }
          ]
        }
      ],
      "notes": []
    }
  ],
  "assets": []
}