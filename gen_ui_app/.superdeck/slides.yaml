config: {}
slides: 
  - key: 'm0lMk1RF'
    options: {}
    markdown: |-
      {@column 
        align: center
        flex: 1
      }
      #### Leo Farias
      @leoafarias
      
      {@column align: center_right}
      - Founder/CEO/CTO
      - Open Source Contributor
      - Flutter & Dart GDE
      - Passionate about UI/UX/DX
    sections: 
      - sub_sections: 
          - content: |
              
              #### Leo Farias
              @leoafarias
            options: 
              flex: 1
              align: 'center'
            type: 'column'
          - content: |-
              
              - Founder/CEO/CTO
              - Open Source Contributor
              - Flutter & Dart GDE
              - Passionate about UI/UX/DX
            options: 
              align: 'center_right'
            type: 'column'
    notes: []
  - key: 'JXYAv556'
    options: {}
    markdown: |-
      {@section flex: 2}
      {@column
        align: center
        tag: heading
      }
      # Generative UI
      # with Flutter
    sections: 
      - options: 
          flex: 2
        sub_sections: 
          - content: |-
              
              # Generative UI
              # with Flutter
            options: 
              align: 'center'
              tag: 'heading'
            type: 'column'
    notes: []
  - key: 'PWx72yxc'
    options: {}
    markdown: |-
      {@column 
        align: center
        flex: 1
      }
      #### Leo Farias
      @leoafarias
      
      {@column align: center_right}
      - Founder/CEO/CTO
      - Open Source Contributor
      - Flutter & Dart GDE
      - Passionate about UI/UX/DX
      
      
      {@column}
    sections: 
      - sub_sections: 
          - content: |
              
              #### Leo Farias
              @leoafarias
            options: 
              flex: 1
              align: 'center'
            type: 'column'
          - content: |
              
              - Founder/CEO/CTO
              - Open Source Contributor
              - Flutter & Dart GDE
              - Passionate about UI/UX/DX
              
            options: 
              align: 'center_right'
            type: 'column'
          - content: ''
            options: null
            type: 'column'
    notes: []
  - key: 'OnZ1cviT'
    options: {}
    markdown: |-
      {@column}
      
      {@column 
        align: center_left 
        flex: 2
      }
      > [!WARNING]  
      > This presentation contains live AI-generated content. Unexpected things may occur during the demonstration.
      
      {@column}
    sections: 
      - sub_sections: 
          - content: |
              
            options: null
            type: 'column'
          - content: |
              
              > [!WARNING]  
              > This presentation contains live AI-generated content. Unexpected things may occur during the demonstration.
            options: 
              flex: 2
              align: 'center_left'
            type: 'column'
          - content: ''
            options: null
            type: 'column'
    notes: []
  - key: 'D4etKl0J'
    options: {}
    markdown: |-
      {@column 
        flex: 2 
        align: center_right
      }
      ### Generative UI
      {@column}
      ## VS
      {@column flex: 2}
      ### AI Assisted Code Generation
    sections: 
      - sub_sections: 
          - content: |-
              
              ### Generative UI
            options: 
              flex: 2
              align: 'center_right'
            type: 'column'
          - content: |-
              
              ## VS
            options: null
            type: 'column'
          - content: |-
              
              ### AI Assisted Code Generation
            options: 
              flex: 2
            type: 'column'
    notes: []
  - key: '4E2GOMRu'
    options: {}
    markdown: |-
      ### What is Generative UI?
      
      {@column}
      
      - LLMs are great at generating content based on context
      - GUIs are great at providing structured, interactive interfaces for user input and navigation
    sections: 
      - sub_sections: 
          - content: |
              ### What is Generative UI?
            type: 'column'
          - content: |-
              
              
              - LLMs are great at generating content based on context
              - GUIs are great at providing structured, interactive interfaces for user input and navigation
            options: null
            type: 'column'
    notes: []
  - key: '7qVeHjc5'
    options: {}
    markdown: '# LLM ❤️ GUI'
    sections: 
      - sub_sections: 
          - content: '# LLM ❤️ GUI'
            type: 'column'
    notes: []
  - key: 'D6lTKmGt'
    options: {}
    markdown: |-
      {@column}
      {@column
        flex: 2
        align: center
      }
      Creates dynamic, context-aware UIs by interpreting actions and maintaining state with LLMs for fluid, interactive responses.
      
      {@column}
    sections: 
      - sub_sections: 
          - content: ''
            options: null
            type: 'column'
          - content: |
              
              Creates dynamic, context-aware UIs by interpreting actions and maintaining state with LLMs for fluid, interactive responses.
            options: 
              flex: 2
              align: 'center'
            type: 'column'
          - content: ''
            options: null
            type: 'column'
    notes: []
  - key: 'hHrCdu5G'
    options: {}
    markdown: |-
      ### Benefits of UI over Chat
      
      - More intuitive and user-friendly, especially for complex tasks
      - Faster feedback loop between users and LLMs
      - Enhances efficiency and interaction
    sections: 
      - sub_sections: 
          - content: |-
              ### Benefits of UI over Chat
              
              - More intuitive and user-friendly, especially for complex tasks
              - Faster feedback loop between users and LLMs
              - Enhances efficiency and interaction
            type: 'column'
    notes: []
  - key: '57d9uRwZ'
    options: {}
    markdown: |-
      {@column
        flex: 3 
        align: center
      }
      ### Flutter is Well-Suited for Generative UI
      Built for any screen: Ideal for generating adaptive UIs across devices and platforms.
      {@column}
    sections: 
      - sub_sections: 
          - content: |-
              
              ### Flutter is Well-Suited for Generative UI
              Built for any screen: Ideal for generating adaptive UIs across devices and platforms.
            options: 
              flex: 3
              align: 'center'
            type: 'column'
          - content: ''
            options: null
            type: 'column'
    notes: []
  - key: 'GDamh4hN'
    options: {}
    markdown: |-
      ## How can LLMs Understtand Your UI?
      
      {@column tag: image}
      ![structured_output](assets/structured_output.png)
    sections: 
      - sub_sections: 
          - content: |
              ## How can LLMs Understtand Your UI?
            type: 'column'
          - content: |-
              
              ![structured_output](assets/structured_output.png)
            options: 
              tag: 'image'
            type: 'column'
    notes: []
  - key: 'hi7HztOa'
    options: {}
    markdown: |-
      {@column}
      
      ## Structured Output
      {@column}
      
      ```dart
      final schema = Schema.array(
        description: 'List of recipes',
        items: Schema.object(
          properties: {
            'recipeName': Schema.string(
              description: 'Name of the recipe.',
              nullable: false,
            ),
          },
          requiredProperties: ['recipeName'],
        ),
      );
      
      final model = GenerativeModel(
        model: 'gemini-1.5-pro',
        apiKey: apiKey,
        generationConfig: GenerationConfig(
          responseMimeType: 'application/json',
          responseSchema: schema,
        ),
      );
      
      final prompt = 'List a few popular cookie recipes.';
      final response = await model.generateContent([Content.text(prompt)]);
      
      ```
    sections: 
      - sub_sections: 
          - content: |-
              
              
              ## Structured Output
            options: null
            type: 'column'
          - content: |-
              
              
              ```dart
              final schema = Schema.array(
                description: 'List of recipes',
                items: Schema.object(
                  properties: {
                    'recipeName': Schema.string(
                      description: 'Name of the recipe.',
                      nullable: false,
                    ),
                  },
                  requiredProperties: ['recipeName'],
                ),
              );
              
              final model = GenerativeModel(
                model: 'gemini-1.5-pro',
                apiKey: apiKey,
                generationConfig: GenerationConfig(
                  responseMimeType: 'application/json',
                  responseSchema: schema,
                ),
              );
              
              final prompt = 'List a few popular cookie recipes.';
              final response = await model.generateContent([Content.text(prompt)]);
              
              ```
            options: null
            type: 'column'
    notes: []
  - key: '6EU2Xxrf'
    options: {}
    markdown: |-
      {@column}
      ### Color Palette Generator
      
      Generate a color palette based on a given text.
      
      - Name of the palette
      - Font family
      - Font color
      - Color for each corner of the palette
    sections: 
      - sub_sections: 
          - content: |-
              
              ### Color Palette Generator
              
              Generate a color palette based on a given text.
              
              - Name of the palette
              - Font family
              - Font color
              - Color for each corner of the palette
            options: null
            type: 'column'
    notes: []
  - key: 'qek7UrZY'
    options: {}
    markdown: |-
      {@column}
      ```dart
      final schema = Schema.object(properties: {
        'name': Schema.string(
          description:
              'The text content to display on color palette. Format: #FF0000',
          nullable: false,
        ),
        'font': Schema.enumString(
          enumValues: ColorPaletteFontFamily.enumString,
          description: 'The font to use for the poster text.',
          nullable: false,
        ),
        'fontColor': Schema.string(
          description: 'The hex color value of the poster text. Format: #FF0000',
          nullable: false,
        ),
        'topLeftColor': Schema.string(
          description:
              'The hex color value top left corner of color palette. Format: #FF0000',
          nullable: false,
        ),
        'topRightColor': Schema.string(
          description:
              'The hex color value top right corner of color palette. Format: #FF0000',
          nullable: false,
        ),
        'bottomLeftColor': Schema.string(
          description:
              'The hex color value bottom left corner of color palette. Format: #FF0000',
          nullable: false,
        ),
        'bottomRightColor': Schema.string(
          description:
              'The hex color value bottom right corner of color palette. Format: #FF0000',
          nullable: false,
        )
      }, requiredProperties: [
        'name',
        'font',
        'fontColor',
        'topLeftColor',
        'topRightColor',
        'bottomLeftColor',
        'bottomRightColor',
      ]);
      
      ```
    sections: 
      - sub_sections: 
          - content: |-
              
              ```dart
              final schema = Schema.object(properties: {
                'name': Schema.string(
                  description:
                      'The text content to display on color palette. Format: #FF0000',
                  nullable: false,
                ),
                'font': Schema.enumString(
                  enumValues: ColorPaletteFontFamily.enumString,
                  description: 'The font to use for the poster text.',
                  nullable: false,
                ),
                'fontColor': Schema.string(
                  description: 'The hex color value of the poster text. Format: #FF0000',
                  nullable: false,
                ),
                'topLeftColor': Schema.string(
                  description:
                      'The hex color value top left corner of color palette. Format: #FF0000',
                  nullable: false,
                ),
                'topRightColor': Schema.string(
                  description:
                      'The hex color value top right corner of color palette. Format: #FF0000',
                  nullable: false,
                ),
                'bottomLeftColor': Schema.string(
                  description:
                      'The hex color value bottom left corner of color palette. Format: #FF0000',
                  nullable: false,
                ),
                'bottomRightColor': Schema.string(
                  description:
                      'The hex color value bottom right corner of color palette. Format: #FF0000',
                  nullable: false,
                )
              }, requiredProperties: [
                'name',
                'font',
                'fontColor',
                'topLeftColor',
                'topRightColor',
                'bottomLeftColor',
                'bottomRightColor',
              ]);
              
              ```
            options: null
            type: 'column'
    notes: []
  - key: '8DDlBdti'
    options: 
      style: 'demo'
    markdown: |-
      {@colorPalette
        type: schema
        prompts:
          - tropical
          - vibrant
          - pastel
          - chocolatey pink unicorn
          - cyberpunk
      }
    sections: 
      - sub_sections: 
          - options: 
              name: 'colorPalette'
              type: 'schema'
              prompts: 
                - 'tropical'
                - 'vibrant'
                - 'pastel'
                - 'chocolatey pink unicorn'
                - 'cyberpunk'
            content: ''
            type: 'widget'
    notes: []
  - key: 'm7QWZujG'
    options: 
      style: 'demo'
    markdown: |-
      {@colorPalette
        type: widget
        prompts:
          - tropical
          - vibrant
          - pastel
          - chocolatey pink unicorn
          - cyberpunk
      }
    sections: 
      - sub_sections: 
          - options: 
              name: 'colorPalette'
              type: 'widget'
              prompts: 
                - 'tropical'
                - 'vibrant'
                - 'pastel'
                - 'chocolatey pink unicorn'
                - 'cyberpunk'
            content: ''
            type: 'widget'
    notes: []
  - key: 'H0jUl8Aj'
    options: {}
    markdown: '## LLMs Orchestrate APIs'
    sections: 
      - sub_sections: 
          - content: '## LLMs Orchestrate APIs'
            type: 'column'
    notes: []
  - key: 'srY9Srz1'
    options: {}
    markdown: |-
      {@column 
        align: center_right
        tag: heading
        flex: 3
      } 
      
      ### Gemini Function Calling
      The Function Calling feature is in Beta release
      
      
      ![llm tools](assets/llm_tools.png){.cover}
    sections: 
      - sub_sections: 
          - content: |-
              
              
              ### Gemini Function Calling
              The Function Calling feature is in Beta release
              
              
              ![llm tools](assets/llm_tools.png){.cover}
            options: 
              flex: 3
              align: 'center_right'
              tag: 'heading'
            type: 'column'
    notes: []
  - key: '85oPyLzH'
    options: 
      style: 'demo'
    markdown: |-
      {@lightControl 
        type: schema
        prompts:
          - Dim the lights by 20
          - Increase by 35
          - Turn off the lights
          - Set it to 80
          - Lower by half
          - Max brightness
      }
    sections: 
      - sub_sections: 
          - options: 
              name: 'lightControl'
              type: 'schema'
              prompts: 
                - 'Dim the lights by 20'
                - 'Increase by 35'
                - 'Turn off the lights'
                - 'Set it to 80'
                - 'Lower by half'
                - 'Max brightness'
            content: ''
            type: 'widget'
    notes: []
  - key: 'cU4QSRK1'
    options: {}
    markdown: |-
      {@column 
        align: bottom_right
        tag: heading
      }
      
      ### User Interaction
      Natural Language way to interact with an LLM
      
      {@column
        tag: image
        flex: 3
      }
      ![llm response](assets/llm_interaction.png)
    sections: 
      - sub_sections: 
          - content: |
              
              
              ### User Interaction
              Natural Language way to interact with an LLM
            options: 
              align: 'bottom_right'
              tag: 'heading'
            type: 'column'
          - content: |-
              
              ![llm response](assets/llm_interaction.png)
            options: 
              flex: 3
              tag: 'image'
            type: 'column'
    notes: []
  - key: 'pTufGpKn'
    options: {}
    markdown: |-
      {@column
        align: center_left
        tag: heading
      }
      ### Widget Response
      
      {@column 
        flex: 3
        tag: image
      }
      ![widget_response](assets/widget_response.png)
    sections: 
      - sub_sections: 
          - content: |
              
              ### Widget Response
            options: 
              align: 'center_left'
              tag: 'heading'
            type: 'column'
          - content: |-
              
              ![widget_response](assets/widget_response.png)
            options: 
              flex: 3
              tag: 'image'
            type: 'column'
    notes: []
  - key: '3eFdrtdl'
    options: 
      style: 'demo'
    markdown: |-
      {@lightControl
        type: widget
        prompts:
          - Dim the lights by 20
          - Increase by 35
          - Turn off the lights
          - Set it to 80
          - Lower by half
          - Max brightness
      }
    sections: 
      - sub_sections: 
          - options: 
              name: 'lightControl'
              type: 'widget'
              prompts: 
                - 'Dim the lights by 20'
                - 'Increase by 35'
                - 'Turn off the lights'
                - 'Set it to 80'
                - 'Lower by half'
                - 'Max brightness'
            content: ''
            type: 'widget'
    notes: []
  - key: 'pNxPyfLK'
    options: {}
    markdown: '## What if the tool to use is a widget schema?'
    sections: 
      - sub_sections: 
          - content: '## What if the tool to use is a widget schema?'
            type: 'column'
    notes: []
  - key: '5cGNbsJx'
    options: {}
    markdown: |-
      ### Experimental
      
      ```dart
      final schema = Schema.object(properties: {
        'textFields': Schema.array(
          description: 'A list of text fields',
          items: TextFieldSchemaDto.schema,
          nullable: true,
        ),
        'dropdowns': Schema.array(
          description: 'A list of dropdowns',
          items: DropdownSchemaDto.schema,
          nullable: true,
        ),
        'colorPickers': Schema.array(
          description: 'A list of colors pickers',
          items: ColorPickerDtoSchema.schema,
          nullable: true,
        ),
      });
      
      ```
    sections: 
      - sub_sections: 
          - content: |-
              ### Experimental
              
              ```dart
              final schema = Schema.object(properties: {
                'textFields': Schema.array(
                  description: 'A list of text fields',
                  items: TextFieldSchemaDto.schema,
                  nullable: true,
                ),
                'dropdowns': Schema.array(
                  description: 'A list of dropdowns',
                  items: DropdownSchemaDto.schema,
                  nullable: true,
                ),
                'colorPickers': Schema.array(
                  description: 'A list of colors pickers',
                  items: ColorPickerDtoSchema.schema,
                  nullable: true,
                ),
              });
              
              ```
            type: 'column'
    notes: []
  - key: 'J6DNhZau'
    options: 
      style: 'demo'
    markdown: |-
      {@widgetSchema
        type: widget
        prompts:
          - Change top colors
          - Change font
          - Change all colors
          - Change everything
      }
    sections: 
      - sub_sections: 
          - options: 
              name: 'widgetSchema'
              type: 'widget'
              prompts: 
                - 'Change top colors'
                - 'Change font'
                - 'Change all colors'
                - 'Change everything'
            content: ''
            type: 'widget'
    notes: []
  - key: '3kW1wOHd'
    options: {}
    markdown: '## The future of UI might be orchestrating user experiences rather than creating it.'
    sections: 
      - sub_sections: 
          - content: '## The future of UI might be orchestrating user experiences rather than creating it.'
            type: 'column'
    notes: []
  - key: 'UqCN11cB'
    options: {}
    markdown: |-
      ### Thank you
      
      Leo Farias
      @leoafarias
      (GitHub, Twitter/X)
    sections: 
      - sub_sections: 
          - content: |-
              ### Thank you
              
              Leo Farias
              @leoafarias
              (GitHub, Twitter/X)
            type: 'column'
    notes: []
assets: 
  - path: '.superdeck/generated/thumbnail_JXYAv556.png'
    width: 512
    height: 288
  - path: '.superdeck/generated/thumbnail_PWx72yxc.png'
    width: 512
    height: 288
  - path: '.superdeck/generated/thumbnail_OnZ1cviT.png'
    width: 512
    height: 288
  - path: '.superdeck/generated/thumbnail_D4etKl0J.png'
    width: 512
    height: 288
  - path: '.superdeck/generated/thumbnail_4E2GOMRu.png'
    width: 512
    height: 288
  - path: '.superdeck/generated/thumbnail_7qVeHjc5.png'
    width: 512
    height: 288
  - path: '.superdeck/generated/thumbnail_D6lTKmGt.png'
    width: 512
    height: 288
  - path: '.superdeck/generated/thumbnail_hHrCdu5G.png'
    width: 512
    height: 288
  - path: '.superdeck/generated/thumbnail_57d9uRwZ.png'
    width: 512
    height: 288
  - path: '.superdeck/generated/thumbnail_GDamh4hN.png'
    width: 512
    height: 288
  - path: '.superdeck/generated/thumbnail_hi7HztOa.png'
    width: 512
    height: 288
  - path: '.superdeck/generated/thumbnail_6EU2Xxrf.png'
    width: 512
    height: 288
  - path: '.superdeck/generated/thumbnail_qek7UrZY.png'
    width: 512
    height: 288
  - path: '.superdeck/generated/thumbnail_8DDlBdti.png'
    width: 512
    height: 288
  - path: '.superdeck/generated/thumbnail_m7QWZujG.png'
    width: 512
    height: 288
  - path: '.superdeck/generated/thumbnail_H0jUl8Aj.png'
    width: 512
    height: 288
  - path: '.superdeck/generated/thumbnail_85oPyLzH.png'
    width: 512
    height: 288
  - path: '.superdeck/generated/thumbnail_cU4QSRK1.png'
    width: 512
    height: 288
  - path: '.superdeck/generated/thumbnail_pTufGpKn.png'
    width: 512
    height: 288
  - path: '.superdeck/generated/thumbnail_3eFdrtdl.png'
    width: 512
    height: 288
  - path: '.superdeck/generated/thumbnail_pNxPyfLK.png'
    width: 512
    height: 288
  - path: '.superdeck/generated/thumbnail_5cGNbsJx.png'
    width: 512
    height: 288
  - path: '.superdeck/generated/thumbnail_J6DNhZau.png'
    width: 512
    height: 288
  - path: '.superdeck/generated/thumbnail_3kW1wOHd.png'
    width: 512
    height: 288
  - path: '.superdeck/generated/thumbnail_UqCN11cB.png'
    width: 512
    height: 288
