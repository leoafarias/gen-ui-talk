config: {}
slides:
  - key: 'D36namou'
    options: {}
    markdown: |-
      {@section flex: 2}
      {@column
        align: center
      }
      # Generative UI {.heading}
      # with Flutter {.subheading}
    sections:
      - blocks:
          - align: 'center'
            content: |-
              # Generative UI {.heading}
              # with Flutter {.subheading}
            scrollable: false
        flex: 2
        type: 'section'
    notes: []
    assets:
      - path: '.superdeck/generated/thumbnail_D36namou.png'
        width: 512
        height: 288
  - key: 'brprlAOT'
    options: {}
    markdown: |-
      {@column 
        align: center
      }
      
      #### Leo Farias {.heading}
      @leoafarias {.subheading}
      
      {@column align: center_left}
      - Founder/CEO/CTO
      - Open Source Contributor (fvm, mix, superdeck, others..)
      - Flutter & Dart GDE
      - Passionate about UI/UX/DX
    sections:
      - blocks:
          - align: 'center'
            content: |
              #### Leo Farias {.heading}
              @leoafarias {.subheading}
            scrollable: false
          - align: 'center_left'
            content: |-
              - Founder/CEO/CTO
              - Open Source Contributor (fvm, mix, superdeck, others..)
              - Flutter & Dart GDE
              - Passionate about UI/UX/DX
            scrollable: false
        type: 'section'
    notes: []
    assets: []
  - key: 'JRXV2rTe'
    options: {}
    markdown: |-
      {@column}
      
      {@column 
        align: center_left 
        flex: 2
      }
      > [!WARNING]  
      > Esta presentación contiene contenido generado en vivo por IA. Durante la demostración pueden ocurrir eventos inesperados
      
      {@column}
    sections:
      - blocks:
          - content: ''
            scrollable: false
          - flex: 2
            align: 'center_left'
            content: |
              > [!WARNING]  
              > Esta presentación contiene contenido generado en vivo por IA. Durante la demostración pueden ocurrir eventos inesperados
            scrollable: false
          - scrollable: false
        type: 'section'
    notes: []
    assets: []
  - key: 'gTvLpmRu'
    options: {}
    markdown: |-
      {@column 
        flex: 2 
        align: center_right
      }
      ### Generative UI {.heading}
      {@column}
      ## VS 
      {@column flex: 2}
      ### AI Assisted Code Generation
    sections:
      - blocks:
          - flex: 2
            align: 'center_right'
            content: '### Generative UI {.heading}'
            scrollable: false
          - content: '## VS '
            scrollable: false
          - flex: 2
            content: '### AI Assisted Code Generation'
            scrollable: false
        type: 'section'
    notes: []
    assets: []
  - key: 'pU4bIipS'
    options: {}
    markdown: |-
      ### ¿Qué es una UI Generativa? {.heading}
      
      {@column}
      
      - Los LLM son excelentes para generar contenido basado en el contexto.
      - Las GUI son excelentes para proporcionar interfaces estructuradas e interactivas para la entrada de usuario y navegación.
    sections:
      - blocks:
          - content: |
              ### ¿Qué es una UI Generativa? {.heading}
            scrollable: false
          - content: |-
              - Los LLM son excelentes para generar contenido basado en el contexto.
              - Las GUI son excelentes para proporcionar interfaces estructuradas e interactivas para la entrada de usuario y navegación.
            scrollable: false
        type: 'section'
    notes: []
    assets: []
  - key: 'BM8dTIiu'
    options: {}
    markdown: '# LLM ❤️ GUI {.heading}'
    sections:
      - blocks:
          - content: '# LLM ❤️ GUI {.heading}'
            scrollable: false
        type: 'section'
    notes: []
    assets:
      - path: '.superdeck/generated/thumbnail_BM8dTIiu.png'
        width: 512
        height: 288
  - key: 'ZpiYHha1'
    options: {}
    markdown: |-
      {@column}
      {@column
        flex: 5
        align: center
      }
      ### Crea interfaces dinámicas y sensibles al contexto al interpretar acciones y mantener el estado con LLMs para respuestas fluidas e interactivas. {.heading}
      
      {@column}
    sections:
      - blocks:
          - scrollable: false
          - flex: 5
            align: 'center'
            content: |
              ### Crea interfaces dinámicas y sensibles al contexto al interpretar acciones y mantener el estado con LLMs para respuestas fluidas e interactivas. {.heading}
            scrollable: false
          - scrollable: false
        type: 'section'
    notes: []
    assets: []
  - key: 'ZhsL96Je'
    options: {}
    markdown: |-
      ### Ventajas sobre el chat
      
      -	Más intuitivo y fácil de usar, especialmente para tareas complejas
      -	Ciclo de feedback más rápido entre usuarios y LLMs
      -	Mejora la eficiencia y la interacción
    sections:
      - blocks:
          - content: |-
              ### Ventajas sobre el chat
              
              -	Más intuitivo y fácil de usar, especialmente para tareas complejas
              -	Ciclo de feedback más rápido entre usuarios y LLMs
              -	Mejora la eficiencia y la interacción
            scrollable: false
        type: 'section'
    notes: []
    assets: []
  - key: 'oVui9VPS'
    options: {}
    markdown: |-
      {@column}
      
      {@column
        flex: 3 
        align: center
      }
      ### Flutter es ideal para UI Generativa
      Built for any screen: Ideal para generar UIs adaptativas en diversos dispositivos y plataformas.
      
      {@column}
    sections:
      - blocks:
          - content: ''
            scrollable: false
          - flex: 3
            align: 'center'
            content: |
              ### Flutter es ideal para UI Generativa
              Built for any screen: Ideal para generar UIs adaptativas en diversos dispositivos y plataformas.
            scrollable: false
          - scrollable: false
        type: 'section'
    notes: []
    assets: []
  - key: 'jIeTulIX'
    options: {}
    markdown: |-
      ### ¿Cómo pueden los LLM comprender tu UI?
      
      {@column}
      
      ![structured_output](assets/structured_output.png)
    sections:
      - blocks:
          - content: |
              ### ¿Cómo pueden los LLM comprender tu UI?
            scrollable: false
          - content: '![structured_output](assets/structured_output.png)'
            scrollable: false
        type: 'section'
    notes: []
    assets: []
  - key: '3gDaO4JA'
    options: {}
    markdown: |-
      {@column}
      
      ### Definir el schema{.heading}
      
      {@column}
      
      ```dart
      final schema = Schema.array(
        description: 'List of recipes',
        items: Schema.object(
          properties: {
            'recipeName': Schema.string(
              description: 'Name of the recipe.',
              nullable: false,
            ),
          },
          requiredProperties: ['recipeName'],
        ),
      );
      
      ```{.code}
    sections:
      - blocks:
          - content: |
              ### Definir el schema{.heading}
            scrollable: false
          - content: |-
              ```dart
              final schema = Schema.array(
                description: 'List of recipes',
                items: Schema.object(
                  properties: {
                    'recipeName': Schema.string(
                      description: 'Name of the recipe.',
                      nullable: false,
                    ),
                  },
                  requiredProperties: ['recipeName'],
                ),
              );
              
              ```{.code}
            scrollable: false
        type: 'section'
    notes: []
    assets: []
  - key: 'Mmn4FSEE'
    options: {}
    markdown: |-
      {@column align: bottom_center}
      
      ### Configurar responseMimeType y responseSchema {.heading}
      
      {@column}
      
      ```dart
      final schema = Schema.array(
        description: 'List of recipes',
        items: Schema.object(
          properties: {
            'recipeName': Schema.string(
              description: 'Name of the recipe.',
              nullable: false,
            ),
          },
          requiredProperties: ['recipeName'],
        ),
      );
      
      
      final model = GenerativeModel(
        model: 'gemini-1.5-pro',
        apiKey: apiKey,
        generationConfig: GenerationConfig(
          responseMimeType: 'application/json',
          responseSchema: schema,
        ),
      );
      
      ```{.code}
    sections:
      - blocks:
          - align: 'bottom_center'
            content: |
              ### Configurar responseMimeType y responseSchema {.heading}
            scrollable: false
          - content: |-
              ```dart
              final schema = Schema.array(
                description: 'List of recipes',
                items: Schema.object(
                  properties: {
                    'recipeName': Schema.string(
                      description: 'Name of the recipe.',
                      nullable: false,
                    ),
                  },
                  requiredProperties: ['recipeName'],
                ),
              );
              
              
              final model = GenerativeModel(
                model: 'gemini-1.5-pro',
                apiKey: apiKey,
                generationConfig: GenerationConfig(
                  responseMimeType: 'application/json',
                  responseSchema: schema,
                ),
              );
              
              ```{.code}
            scrollable: false
        type: 'section'
    notes: []
    assets: []
  - key: 'KvQsJipa'
    options: {}
    markdown: |-
      {@section flex: 2}
      
      
      {@column flex: 2}
      
      #### Pasar un prompt a tu modelo {.heading}
      
      {@column flex: 3}
      
      ```dart
      final prompt = 'List a few popular cookie recipes.';
      final response = await model.generateContent([Content.text(prompt)]);
      
      print(response.candidates.first.content);
      
      ```{.code}
      
      {@section flex: 3}
      
      {@column 
        flex: 2
        align: bottom_left
      }
      
      #### JSON Response
      
      {@column flex: 3}
      
      ```json
      [
        {
          "recipeName": "Chocolate Chip Cookies"
        },
        {
          "recipeName": "Peanut Butter Cookies"
        },
        {
          "recipeName": "Snickerdoodles"
        }
      ]
      ```
    sections:
      - blocks:
          - flex: 2
            content: |
              #### Pasar un prompt a tu modelo {.heading}
            scrollable: false
          - flex: 3
            content: |
              ```dart
              final prompt = 'List a few popular cookie recipes.';
              final response = await model.generateContent([Content.text(prompt)]);
              
              print(response.candidates.first.content);
              
              ```{.code}
            scrollable: false
        flex: 2
        type: 'section'
      - blocks:
          - flex: 2
            align: 'bottom_left'
            content: |
              #### JSON Response
            scrollable: false
          - flex: 3
            content: |-
              ```json
              [
                {
                  "recipeName": "Chocolate Chip Cookies"
                },
                {
                  "recipeName": "Peanut Butter Cookies"
                },
                {
                  "recipeName": "Snickerdoodles"
                }
              ]
              ```
            scrollable: false
        flex: 3
        type: 'section'
    notes: []
    assets: []
  - key: 'YJuyTjvl'
    options: {}
    markdown: |-
      {@column}
      ### Generador de paleta de colores
      
      Genera una paleta de colores basada en un texto dado.
      
      - Name of the palette
      - Font family
      - Font color
      - Color for each corner of the palette
    sections:
      - blocks:
          - content: |-
              ### Generador de paleta de colores
              
              Genera una paleta de colores basada en un texto dado.
              
              - Name of the palette
              - Font family
              - Font color
              - Color for each corner of the palette
            scrollable: false
        type: 'section'
    notes: []
    assets: []
  - key: 'yo70fIoq'
    options: {}
    markdown: |-
      ```dart
      final schema = Schema.object(properties: {
        'name': Schema.string(
          description:
              'The text content to display on color palette. Format: #FF0000',
          nullable: false,
        ),
        'font': Schema.enumString(
          enumValues: ColorPaletteFontFamily.enumString,
          description: 'The font to use for the poster text.',
          nullable: false,
        ),
        'fontColor': Schema.string(
          description: 'The hex color value of the poster text. Format: #FF0000',
          nullable: false,
        ),
        'topLeftColor': Schema.string(
          description:
              'The hex color value top left corner of color palette. Format: #FF0000',
          nullable: false,
        ),
        'topRightColor': Schema.string(
          description:
              'The hex color value top right corner of color palette. Format: #FF0000',
          nullable: false,
        ),
        'bottomLeftColor': Schema.string(
          description:
              'The hex color value bottom left corner of color palette. Format: #FF0000',
          nullable: false,
        ),
        'bottomRightColor': Schema.string(
          description:
              'The hex color value bottom right corner of color palette. Format: #FF0000',
          nullable: false,
        )
      }, requiredProperties: [
        'name',
        'font',
        'fontColor',
        'topLeftColor',
        'topRightColor',
        'bottomLeftColor',
        'bottomRightColor',
      ]);
      
      ```
    sections:
      - blocks:
          - content: |-
              ```dart
              final schema = Schema.object(properties: {
                'name': Schema.string(
                  description:
                      'The text content to display on color palette. Format: #FF0000',
                  nullable: false,
                ),
                'font': Schema.enumString(
                  enumValues: ColorPaletteFontFamily.enumString,
                  description: 'The font to use for the poster text.',
                  nullable: false,
                ),
                'fontColor': Schema.string(
                  description: 'The hex color value of the poster text. Format: #FF0000',
                  nullable: false,
                ),
                'topLeftColor': Schema.string(
                  description:
                      'The hex color value top left corner of color palette. Format: #FF0000',
                  nullable: false,
                ),
                'topRightColor': Schema.string(
                  description:
                      'The hex color value top right corner of color palette. Format: #FF0000',
                  nullable: false,
                ),
                'bottomLeftColor': Schema.string(
                  description:
                      'The hex color value bottom left corner of color palette. Format: #FF0000',
                  nullable: false,
                ),
                'bottomRightColor': Schema.string(
                  description:
                      'The hex color value bottom right corner of color palette. Format: #FF0000',
                  nullable: false,
                )
              }, requiredProperties: [
                'name',
                'font',
                'fontColor',
                'topLeftColor',
                'topRightColor',
                'bottomLeftColor',
                'bottomRightColor',
              ]);
              
              ```
            scrollable: false
        type: 'section'
    notes: []
    assets:
      - path: '.superdeck/generated/thumbnail_yo70fIoq.png'
        width: 512
        height: 288
  - key: 'F8ytX2x7'
    options:
      style: 'demo'
    markdown: |-
      {@colorPalette
        kind: schema
        prompts:
          - tropical
          - vibrant
          - pastel
          - chocolatey pink unicorn
          - cyberpunk
      }
    sections:
      - blocks:
          - name: 'colorPalette'
            scrollable: false
            type: 'widget'
            kind: 'schema'
            prompts:
              - 'tropical'
              - 'vibrant'
              - 'pastel'
              - 'chocolatey pink unicorn'
              - 'cyberpunk'
        type: 'section'
    notes: []
    assets:
      - path: '.superdeck/generated/thumbnail_F8ytX2x7.png'
        width: 512
        height: 288
  - key: 'UCL3ljnv'
    options:
      style: 'demo'
    markdown: |-
      {@colorPalette
        kind: widget
        prompts:
          - tropical
          - vibrant
          - pastel
          - chocolatey pink unicorn
          - cyberpunk
      }
    sections:
      - blocks:
          - name: 'colorPalette'
            scrollable: false
            type: 'widget'
            kind: 'widget'
            prompts:
              - 'tropical'
              - 'vibrant'
              - 'pastel'
              - 'chocolatey pink unicorn'
              - 'cyberpunk'
        type: 'section'
    notes: []
    assets:
      - path: '.superdeck/generated/thumbnail_UCL3ljnv.png'
        width: 512
        height: 288
  - key: 'NQNfkx8t'
    options: {}
    markdown: '## Los LLM orquestan APIs'
    sections:
      - blocks:
          - content: '## Los LLM orquestan APIs'
            scrollable: false
        type: 'section'
    notes: []
    assets: []
  - key: 'QQJaCN5k'
    options: {}
    markdown: |-
      {@section} 
      {@column}
      #### Gemini Function Calling
      {@column}
      The Function Calling feature is in Beta release
      
      {@section flex: 4}
      ![llm tools](assets/llm_tools.png){.cover}
    sections:
      - blocks:
          - content: '#### Gemini Function Calling'
            scrollable: false
          - content: |
              The Function Calling feature is in Beta release
            scrollable: false
        type: 'section'
      - blocks:
          - content: '![llm tools](assets/llm_tools.png){.cover}'
            scrollable: false
        flex: 4
        type: 'section'
    notes: []
    assets:
      - path: '.superdeck/generated/thumbnail_QQJaCN5k.png'
        width: 512
        height: 288
  - key: 'B4azSyhQ'
    options:
      style: 'demo'
    markdown: |-
      {@lightControl 
        kind: schema
        prompts:
          - Dim the lights by 20
          - Increase by 35
          - Turn off the lights
          - Set it to 80
          - Lower by half
          - Max brightness
      }
    sections:
      - blocks:
          - name: 'lightControl'
            scrollable: false
            type: 'widget'
            kind: 'schema'
            prompts:
              - 'Dim the lights by 20'
              - 'Increase by 35'
              - 'Turn off the lights'
              - 'Set it to 80'
              - 'Lower by half'
              - 'Max brightness'
        type: 'section'
    notes: []
    assets:
      - path: '.superdeck/generated/thumbnail_B4azSyhQ.png'
        width: 512
        height: 288
  - key: 'hBq6XCkc'
    options: {}
    markdown: |-
      {@column 
        align: bottom_right
      }
      
      ### User Interaction {.heading}
      Forma de interactuar con un LLM mediante lenguaje natural
      
      {@column
        flex: 2
      }
      ![llm response](assets/llm_interaction.png)
    sections:
      - blocks:
          - align: 'bottom_right'
            content: |
              ### User Interaction {.heading}
              Forma de interactuar con un LLM mediante lenguaje natural
            scrollable: false
          - flex: 2
            content: '![llm response](assets/llm_interaction.png)'
            scrollable: false
        type: 'section'
    notes: []
    assets: []
  - key: '8I3fvDqR'
    options: {}
    markdown: |-
      {@column
        align: center_left
      }
      ### Widget Response {.heading}
      
      {@column 
        flex: 3
      }
      ![widget_response](assets/widget_response.png)
    sections:
      - blocks:
          - align: 'center_left'
            content: |
              ### Widget Response {.heading}
            scrollable: false
          - flex: 3
            content: '![widget_response](assets/widget_response.png)'
            scrollable: false
        type: 'section'
    notes: []
    assets:
      - path: '.superdeck/generated/thumbnail_8I3fvDqR.png'
        width: 512
        height: 288
  - key: 'wcrXMfUu'
    options:
      style: 'demo'
    markdown: |-
      {@lightControl
        kind: widget
        prompts:
          - Dim the lights by 20
          - Increase by 35
          - Turn off the lights
          - Set it to 80
          - Lower by half
          - Max brightness
      }
    sections:
      - blocks:
          - name: 'lightControl'
            scrollable: false
            type: 'widget'
            kind: 'widget'
            prompts:
              - 'Dim the lights by 20'
              - 'Increase by 35'
              - 'Turn off the lights'
              - 'Set it to 80'
              - 'Lower by half'
              - 'Max brightness'
        type: 'section'
    notes: []
    assets:
      - path: '.superdeck/generated/thumbnail_wcrXMfUu.png'
        width: 512
        height: 288
  - key: '9yZftHgP'
    options: {}
    markdown: '## ¿Qué pasa si la herramienta a usar es un esquema de widget?'
    sections:
      - blocks:
          - content: '## ¿Qué pasa si la herramienta a usar es un esquema de widget?'
            scrollable: false
        type: 'section'
    notes: []
    assets: []
  - key: 'ubDKfZYy'
    options: {}
    markdown: '![widget_schema](assets/widget_schema.png)'
    sections:
      - blocks:
          - content: '![widget_schema](assets/widget_schema.png)'
            scrollable: false
        type: 'section'
    notes: []
    assets:
      - path: '.superdeck/generated/thumbnail_ubDKfZYy.png'
        width: 512
        height: 288
  - key: 'qm5WqrJY'
    options: {}
    markdown: |-
      {@column flex: 2}
      ### Dropdown Widget Schema
      
      ```dart
      class DropdownSchemaDto {
        final String label;
        final String currentValue;
        final List<String> options;
      
        DropdownSchemaDto({
          required this.label,
          required this.currentValue,
          required this.options,
        });
      
      ```
      {@column flex: 3}
      
      ```dart
        static final schema = Schema.object(properties: {
          'label': Schema.string(
            description: 'The label of the dropdown',
            nullable: false,
          ),
          'currentValue': Schema.string(
            description: 'The currentValue of the dropdown',
            nullable: false,
          ),
          'options': Schema.array(
            description: 'The options of the dropdown',
            items: Schema.string(
              description: 'The options of the dropdown',
              nullable: false,
            ),
            nullable: false,
          )
        });
      }
      ```
    sections:
      - blocks:
          - flex: 2
            content: |-
              ### Dropdown Widget Schema
              
              ```dart
              class DropdownSchemaDto {
                final String label;
                final String currentValue;
                final List<String> options;
              
                DropdownSchemaDto({
                  required this.label,
                  required this.currentValue,
                  required this.options,
                });
              
              ```
            scrollable: false
          - flex: 3
            content: |-
              ```dart
                static final schema = Schema.object(properties: {
                  'label': Schema.string(
                    description: 'The label of the dropdown',
                    nullable: false,
                  ),
                  'currentValue': Schema.string(
                    description: 'The currentValue of the dropdown',
                    nullable: false,
                  ),
                  'options': Schema.array(
                    description: 'The options of the dropdown',
                    items: Schema.string(
                      description: 'The options of the dropdown',
                      nullable: false,
                    ),
                    nullable: false,
                  )
                });
              }
              ```
            scrollable: false
        type: 'section'
    notes: []
    assets:
      - path: '.superdeck/generated/thumbnail_qm5WqrJY.png'
        width: 512
        height: 288
  - key: 'LgjZ2pSq'
    options: {}
    markdown: |-
      ### Dropdown Schema Builder
      
      {@column flex: 2}
      ```dart
       ListTile(
        title: Text(schema.label),
        trailing: DropdownButton<String>(
          value: schema.currentValue,
          items: schema.options.map((option) {
            return DropdownMenuItem<String>(
              value: option,
              child: Text(option),
            );
          }).toList(),
          onChanged: (newValue) {},
        ),
      );
      ```
    sections:
      - blocks:
          - content: |
              ### Dropdown Schema Builder
            scrollable: false
          - flex: 2
            content: |-
              ```dart
               ListTile(
                title: Text(schema.label),
                trailing: DropdownButton<String>(
                  value: schema.currentValue,
                  items: schema.options.map((option) {
                    return DropdownMenuItem<String>(
                      value: option,
                      child: Text(option),
                    );
                  }).toList(),
                  onChanged: (newValue) {},
                ),
              );
              ```
            scrollable: false
        type: 'section'
    notes: []
    assets: []
  - key: 'Wxrj9iSH'
    options: {}
    markdown: |-
      ### Widget Schemas
      
      
      ```dart
      final schema = Schema.object(properties: {
        'textFields': Schema.array(
          description: 'A list of text fields',
          items: TextFieldSchemaDto.schema,
          nullable: true,
        ),
        'dropdowns': Schema.array(
          description: 'A list of dropdowns',
          items: DropdownSchemaDto.schema,
          nullable: true,
        ),
        'colorPickers': Schema.array(
          description: 'A list of colors pickers',
          items: ColorPickerDtoSchema.schema,
          nullable: true,
        ),
      });
      
      ```
    sections:
      - blocks:
          - content: |-
              ### Widget Schemas
              
              
              ```dart
              final schema = Schema.object(properties: {
                'textFields': Schema.array(
                  description: 'A list of text fields',
                  items: TextFieldSchemaDto.schema,
                  nullable: true,
                ),
                'dropdowns': Schema.array(
                  description: 'A list of dropdowns',
                  items: DropdownSchemaDto.schema,
                  nullable: true,
                ),
                'colorPickers': Schema.array(
                  description: 'A list of colors pickers',
                  items: ColorPickerDtoSchema.schema,
                  nullable: true,
                ),
              });
              
              ```
            scrollable: false
        type: 'section'
    notes: []
    assets:
      - path: '.superdeck/generated/thumbnail_Wxrj9iSH.png'
        width: 512
        height: 288
  - key: 'aJu8RjyT'
    options:
      style: 'demo'
    markdown: |-
      {@widgetSchema
        kind: widget
        prompts:
          - Change top colors
          - Change font
          - Change all colors
          - Change everything
      }
    sections:
      - blocks:
          - name: 'widgetSchema'
            scrollable: false
            type: 'widget'
            kind: 'widget'
            prompts:
              - 'Change top colors'
              - 'Change font'
              - 'Change all colors'
              - 'Change everything'
        type: 'section'
    notes: []
    assets:
      - path: '.superdeck/generated/thumbnail_aJu8RjyT.png'
        width: 512
        height: 288
  - key: 'nuYiXDBE'
    options:
      style: 'quote'
    markdown: |-
      > The future of UI might be orchestrating user
      > experiences rather than creating it.
      
      > El futuro de la UI podría ser orquestar
      > experiencias de usuario en lugar de crearlas.
    sections:
      - blocks:
          - content: |-
              > The future of UI might be orchestrating user
              > experiences rather than creating it.
              
              > El futuro de la UI podría ser orquestar
              > experiencias de usuario en lugar de crearlas.
            scrollable: false
        type: 'section'
    notes: []
    assets: []
  - key: 'npC7NNxN'
    options: {}
    markdown: |-
      ### Gracias
      
      Leo Farias
      @leoafarias
      (GitHub, Twitter/X)
    sections:
      - blocks:
          - content: |-
              ### Gracias
              
              Leo Farias
              @leoafarias
              (GitHub, Twitter/X)
            scrollable: false
        type: 'section'
    notes: []
    assets: []
