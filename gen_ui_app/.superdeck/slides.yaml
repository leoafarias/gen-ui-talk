config: {}
slides:
  - key: 'bCJeLzLi'
    options: {}
    markdown: |-
      {@section flex: 2}
      {@column
        align: center
      }
      # Generative UI
      # with Flutter
    sections:
      - blocks:
          - align: 'center'
            content: |-
              # Generative UI
              # with Flutter
            scrollable: false
        flex: 2
        type: 'section'
    notes: []
    assets:
      - path: '.superdeck/generated/thumbnail_bCJeLzLi.png'
        width: 512
        height: 288
  - key: 'spKrChRz'
    options: {}
    markdown: |-
      {@column 
        align: center
      }
      
      #### Leo Farias
      @leoafarias
      
      {@column align: center_left}
      - Founder/CEO/CTO
      - Open Source Contributor
      - Flutter & Dart GDE
      - Passionate about UI/UX/DX
    sections:
      - blocks:
          - align: 'center'
            content: |
              #### Leo Farias
              @leoafarias
            scrollable: false
          - align: 'center_left'
            content: |-
              - Founder/CEO/CTO
              - Open Source Contributor
              - Flutter & Dart GDE
              - Passionate about UI/UX/DX
            scrollable: false
        type: 'section'
    notes: []
    assets:
      - path: '.superdeck/generated/thumbnail_spKrChRz.png'
        width: 512
        height: 288
  - key: 'OnZ1cviT'
    options: {}
    markdown: |-
      {@column}
      
      {@column 
        align: center_left 
        flex: 2
      }
      > [!WARNING]  
      > This presentation contains live AI-generated content. Unexpected things may occur during the demonstration.
      
      {@column}
    sections:
      - blocks:
          - content: ''
            scrollable: false
          - flex: 2
            align: 'center_left'
            content: |
              > [!WARNING]  
              > This presentation contains live AI-generated content. Unexpected things may occur during the demonstration.
            scrollable: false
          - scrollable: false
        type: 'section'
    notes: []
    assets:
      - path: '.superdeck/generated/thumbnail_OnZ1cviT.png'
        width: 512
        height: 288
  - key: 'D4etKl0J'
    options: {}
    markdown: |-
      {@column 
        flex: 2 
        align: center_right
      }
      ### Generative UI
      {@column}
      ## VS
      {@column flex: 2}
      ### AI Assisted Code Generation
    sections:
      - blocks:
          - flex: 2
            align: 'center_right'
            content: '### Generative UI'
            scrollable: false
          - content: '## VS'
            scrollable: false
          - flex: 2
            content: '### AI Assisted Code Generation'
            scrollable: false
        type: 'section'
    notes: []
    assets:
      - path: '.superdeck/generated/thumbnail_D4etKl0J.png'
        width: 512
        height: 288
  - key: '4E2GOMRu'
    options: {}
    markdown: |-
      ### What is Generative UI?
      
      {@column}
      
      - LLMs are great at generating content based on context
      - GUIs are great at providing structured, interactive interfaces for user input and navigation
    sections:
      - blocks:
          - content: |
              ### What is Generative UI?
            scrollable: false
          - content: |-
              - LLMs are great at generating content based on context
              - GUIs are great at providing structured, interactive interfaces for user input and navigation
            scrollable: false
        type: 'section'
    notes: []
    assets:
      - path: '.superdeck/generated/thumbnail_4E2GOMRu.png'
        width: 512
        height: 288
  - key: '7qVeHjc5'
    options: {}
    markdown: '# LLM ❤️ GUI'
    sections:
      - blocks:
          - content: '# LLM ❤️ GUI'
            scrollable: false
        type: 'section'
    notes: []
    assets:
      - path: '.superdeck/generated/thumbnail_7qVeHjc5.png'
        width: 512
        height: 288
  - key: 'D6lTKmGt'
    options: {}
    markdown: |-
      {@column}
      {@column
        flex: 2
        align: center
      }
      Creates dynamic, context-aware UIs by interpreting actions and maintaining state with LLMs for fluid, interactive responses.
      
      {@column}
    sections:
      - blocks:
          - scrollable: false
          - flex: 2
            align: 'center'
            content: |
              Creates dynamic, context-aware UIs by interpreting actions and maintaining state with LLMs for fluid, interactive responses.
            scrollable: false
          - scrollable: false
        type: 'section'
    notes: []
    assets:
      - path: '.superdeck/generated/thumbnail_D6lTKmGt.png'
        width: 512
        height: 288
  - key: 'hHrCdu5G'
    options: {}
    markdown: |-
      ### Benefits of UI over Chat
      
      - More intuitive and user-friendly, especially for complex tasks
      - Faster feedback loop between users and LLMs
      - Enhances efficiency and interaction
    sections:
      - blocks:
          - content: |-
              ### Benefits of UI over Chat
              
              - More intuitive and user-friendly, especially for complex tasks
              - Faster feedback loop between users and LLMs
              - Enhances efficiency and interaction
            scrollable: false
        type: 'section'
    notes: []
    assets:
      - path: '.superdeck/generated/thumbnail_hHrCdu5G.png'
        width: 512
        height: 288
  - key: 'BCBPTGpJ'
    options: {}
    markdown: |-
      {@column
        flex: 3 
        align: center
      }
      ### Flutter is Well-Suited for Generative UI
      Built for any screen: Ideal for generating adaptive UIs across devices and platforms.
    sections:
      - blocks:
          - flex: 3
            align: 'center'
            content: |-
              ### Flutter is Well-Suited for Generative UI
              Built for any screen: Ideal for generating adaptive UIs across devices and platforms.
            scrollable: false
        type: 'section'
    notes: []
    assets:
      - path: '.superdeck/generated/thumbnail_BCBPTGpJ.png'
        width: 512
        height: 288
  - key: '6Jo26Y4b'
    options: {}
    markdown: |-
      ## How can LLMs Understand Your UI?
      
      {@column}
      
      ![structured_output](assets/structured_output.png)
    sections:
      - blocks:
          - content: |
              ## How can LLMs Understand Your UI?
            scrollable: false
          - content: '![structured_output](assets/structured_output.png)'
            scrollable: false
        type: 'section'
    notes: []
    assets:
      - path: '.superdeck/generated/thumbnail_6Jo26Y4b.png'
        width: 512
        height: 288
  - key: 'jDEVRy3D'
    options: {}
    markdown: |-
      {@column}
      
      ### Define the Schema {.heading}
      
      {@column}
      
      ```dart
      final schema = Schema.array(
        description: 'List of recipes',
        items: Schema.object(
          properties: {
            'recipeName': Schema.string(
              description: 'Name of the recipe.',
              nullable: false,
            ),
          },
          requiredProperties: ['recipeName'],
        ),
      );
      
      ```{.code}
    sections:
      - blocks:
          - content: |
              ### Define the Schema {.heading}
            scrollable: false
          - content: |-
              ```dart
              final schema = Schema.array(
                description: 'List of recipes',
                items: Schema.object(
                  properties: {
                    'recipeName': Schema.string(
                      description: 'Name of the recipe.',
                      nullable: false,
                    ),
                  },
                  requiredProperties: ['recipeName'],
                ),
              );
              
              ```{.code}
            scrollable: false
        type: 'section'
    notes: []
    assets:
      - path: '.superdeck/generated/thumbnail_jDEVRy3D.png'
        width: 512
        height: 288
  - key: '3diQGYW8'
    options: {}
    markdown: |-
      {@column align: bottom_center}
      
      ### Configure responseMimeType & responseSchema {.heading}
      
      {@column}
      
      ```dart
      final schema = Schema.array(
        description: 'List of recipes',
        items: Schema.object(
          properties: {
            'recipeName': Schema.string(
              description: 'Name of the recipe.',
              nullable: false,
            ),
          },
          requiredProperties: ['recipeName'],
        ),
      );
      
      
      final model = GenerativeModel(
        model: 'gemini-1.5-pro',
        apiKey: apiKey,
        generationConfig: GenerationConfig(
          responseMimeType: 'application/json',
          responseSchema: schema,
        ),
      );
      
      ```{.code}
    sections:
      - blocks:
          - align: 'bottom_center'
            content: |
              ### Configure responseMimeType & responseSchema {.heading}
            scrollable: false
          - content: |-
              ```dart
              final schema = Schema.array(
                description: 'List of recipes',
                items: Schema.object(
                  properties: {
                    'recipeName': Schema.string(
                      description: 'Name of the recipe.',
                      nullable: false,
                    ),
                  },
                  requiredProperties: ['recipeName'],
                ),
              );
              
              
              final model = GenerativeModel(
                model: 'gemini-1.5-pro',
                apiKey: apiKey,
                generationConfig: GenerationConfig(
                  responseMimeType: 'application/json',
                  responseSchema: schema,
                ),
              );
              
              ```{.code}
            scrollable: false
        type: 'section'
    notes: []
    assets:
      - path: '.superdeck/generated/thumbnail_3diQGYW8.png'
        width: 512
        height: 288
  - key: 'CnWvT9H8'
    options: {}
    markdown: |-
      {@section flex: 2}
      
      
      {@column flex: 2}
      
      #### Passing a prompt to your model {.heading}
      
      {@column flex: 3}
      
      ```dart
      final prompt = 'List a few popular cookie recipes.';
      final response = await model.generateContent([Content.text(prompt)]);
      
      print(response.candidates.first.content);
      
      ```{.code}
      
      {@section flex: 3}
      
      {@column 
        flex: 2
        align: bottom_left
      }
      
      #### JSON Response
      
      {@column flex: 3}
      
      ```json
      [
        {
          "recipeName": "Chocolate Chip Cookies"
        },
        {
          "recipeName": "Peanut Butter Cookies"
        },
        {
          "recipeName": "Snickerdoodles"
        }
      ]
      ```
    sections:
      - blocks:
          - flex: 2
            content: |
              #### Passing a prompt to your model {.heading}
            scrollable: false
          - flex: 3
            content: |
              ```dart
              final prompt = 'List a few popular cookie recipes.';
              final response = await model.generateContent([Content.text(prompt)]);
              
              print(response.candidates.first.content);
              
              ```{.code}
            scrollable: false
        flex: 2
        type: 'section'
      - blocks:
          - flex: 2
            align: 'bottom_left'
            content: |
              #### JSON Response
            scrollable: false
          - flex: 3
            content: |-
              ```json
              [
                {
                  "recipeName": "Chocolate Chip Cookies"
                },
                {
                  "recipeName": "Peanut Butter Cookies"
                },
                {
                  "recipeName": "Snickerdoodles"
                }
              ]
              ```
            scrollable: false
        flex: 3
        type: 'section'
    notes: []
    assets:
      - path: '.superdeck/generated/thumbnail_CnWvT9H8.png'
        width: 512
        height: 288
  - key: '6EU2Xxrf'
    options: {}
    markdown: |-
      {@column}
      ### Color Palette Generator
      
      Generate a color palette based on a given text.
      
      - Name of the palette
      - Font family
      - Font color
      - Color for each corner of the palette
    sections:
      - blocks:
          - content: |-
              ### Color Palette Generator
              
              Generate a color palette based on a given text.
              
              - Name of the palette
              - Font family
              - Font color
              - Color for each corner of the palette
            scrollable: false
        type: 'section'
    notes: []
    assets:
      - path: '.superdeck/generated/thumbnail_6EU2Xxrf.png'
        width: 512
        height: 288
  - key: 'yo70fIoq'
    options: {}
    markdown: |-
      ```dart
      final schema = Schema.object(properties: {
        'name': Schema.string(
          description:
              'The text content to display on color palette. Format: #FF0000',
          nullable: false,
        ),
        'font': Schema.enumString(
          enumValues: ColorPaletteFontFamily.enumString,
          description: 'The font to use for the poster text.',
          nullable: false,
        ),
        'fontColor': Schema.string(
          description: 'The hex color value of the poster text. Format: #FF0000',
          nullable: false,
        ),
        'topLeftColor': Schema.string(
          description:
              'The hex color value top left corner of color palette. Format: #FF0000',
          nullable: false,
        ),
        'topRightColor': Schema.string(
          description:
              'The hex color value top right corner of color palette. Format: #FF0000',
          nullable: false,
        ),
        'bottomLeftColor': Schema.string(
          description:
              'The hex color value bottom left corner of color palette. Format: #FF0000',
          nullable: false,
        ),
        'bottomRightColor': Schema.string(
          description:
              'The hex color value bottom right corner of color palette. Format: #FF0000',
          nullable: false,
        )
      }, requiredProperties: [
        'name',
        'font',
        'fontColor',
        'topLeftColor',
        'topRightColor',
        'bottomLeftColor',
        'bottomRightColor',
      ]);
      
      ```
    sections:
      - blocks:
          - content: |-
              ```dart
              final schema = Schema.object(properties: {
                'name': Schema.string(
                  description:
                      'The text content to display on color palette. Format: #FF0000',
                  nullable: false,
                ),
                'font': Schema.enumString(
                  enumValues: ColorPaletteFontFamily.enumString,
                  description: 'The font to use for the poster text.',
                  nullable: false,
                ),
                'fontColor': Schema.string(
                  description: 'The hex color value of the poster text. Format: #FF0000',
                  nullable: false,
                ),
                'topLeftColor': Schema.string(
                  description:
                      'The hex color value top left corner of color palette. Format: #FF0000',
                  nullable: false,
                ),
                'topRightColor': Schema.string(
                  description:
                      'The hex color value top right corner of color palette. Format: #FF0000',
                  nullable: false,
                ),
                'bottomLeftColor': Schema.string(
                  description:
                      'The hex color value bottom left corner of color palette. Format: #FF0000',
                  nullable: false,
                ),
                'bottomRightColor': Schema.string(
                  description:
                      'The hex color value bottom right corner of color palette. Format: #FF0000',
                  nullable: false,
                )
              }, requiredProperties: [
                'name',
                'font',
                'fontColor',
                'topLeftColor',
                'topRightColor',
                'bottomLeftColor',
                'bottomRightColor',
              ]);
              
              ```
            scrollable: false
        type: 'section'
    notes: []
    assets:
      - path: '.superdeck/generated/thumbnail_yo70fIoq.png'
        width: 512
        height: 288
  - key: 'F8ytX2x7'
    options:
      style: 'demo'
    markdown: |-
      {@colorPalette
        kind: schema
        prompts:
          - tropical
          - vibrant
          - pastel
          - chocolatey pink unicorn
          - cyberpunk
      }
    sections:
      - blocks:
          - name: 'colorPalette'
            scrollable: false
            type: 'widget'
            kind: 'schema'
            prompts:
              - 'tropical'
              - 'vibrant'
              - 'pastel'
              - 'chocolatey pink unicorn'
              - 'cyberpunk'
        type: 'section'
    notes: []
    assets:
      - path: '.superdeck/generated/thumbnail_F8ytX2x7.png'
        width: 512
        height: 288
  - key: 'UCL3ljnv'
    options:
      style: 'demo'
    markdown: |-
      {@colorPalette
        kind: widget
        prompts:
          - tropical
          - vibrant
          - pastel
          - chocolatey pink unicorn
          - cyberpunk
      }
    sections:
      - blocks:
          - name: 'colorPalette'
            scrollable: false
            type: 'widget'
            kind: 'widget'
            prompts:
              - 'tropical'
              - 'vibrant'
              - 'pastel'
              - 'chocolatey pink unicorn'
              - 'cyberpunk'
        type: 'section'
    notes: []
    assets:
      - path: '.superdeck/generated/thumbnail_UCL3ljnv.png'
        width: 512
        height: 288
  - key: 'H0jUl8Aj'
    options: {}
    markdown: '## LLMs Orchestrate APIs'
    sections:
      - blocks:
          - content: '## LLMs Orchestrate APIs'
            scrollable: false
        type: 'section'
    notes: []
    assets:
      - path: '.superdeck/generated/thumbnail_H0jUl8Aj.png'
        width: 512
        height: 288
  - key: 'QQJaCN5k'
    options: {}
    markdown: |-
      {@section} 
      {@column}
      #### Gemini Function Calling
      {@column}
      The Function Calling feature is in Beta release
      
      {@section flex: 4}
      ![llm tools](assets/llm_tools.png){.cover}
    sections:
      - blocks:
          - content: '#### Gemini Function Calling'
            scrollable: false
          - content: |
              The Function Calling feature is in Beta release
            scrollable: false
        type: 'section'
      - blocks:
          - content: '![llm tools](assets/llm_tools.png){.cover}'
            scrollable: false
        flex: 4
        type: 'section'
    notes: []
    assets: []
  - key: 'B4azSyhQ'
    options:
      style: 'demo'
    markdown: |-
      {@lightControl 
        kind: schema
        prompts:
          - Dim the lights by 20
          - Increase by 35
          - Turn off the lights
          - Set it to 80
          - Lower by half
          - Max brightness
      }
    sections:
      - blocks:
          - name: 'lightControl'
            scrollable: false
            type: 'widget'
            kind: 'schema'
            prompts:
              - 'Dim the lights by 20'
              - 'Increase by 35'
              - 'Turn off the lights'
              - 'Set it to 80'
              - 'Lower by half'
              - 'Max brightness'
        type: 'section'
    notes: []
    assets:
      - path: '.superdeck/generated/thumbnail_B4azSyhQ.png'
        width: 512
        height: 288
  - key: '5dttoW9C'
    options: {}
    markdown: |-
      {@column 
        align: bottom_right
      }
      
      ### User Interaction {.heading}
      Natural Language way to interact with an LLM
      
      {@column
        flex: 2
      }
      ![llm response](assets/llm_interaction.png)
    sections:
      - blocks:
          - align: 'bottom_right'
            content: |
              ### User Interaction {.heading}
              Natural Language way to interact with an LLM
            scrollable: false
          - flex: 2
            content: '![llm response](assets/llm_interaction.png)'
            scrollable: false
        type: 'section'
    notes: []
    assets:
      - path: '.superdeck/generated/thumbnail_5dttoW9C.png'
        width: 512
        height: 288
  - key: '8I3fvDqR'
    options: {}
    markdown: |-
      {@column
        align: center_left
      }
      ### Widget Response {.heading}
      
      {@column 
        flex: 3
      }
      ![widget_response](assets/widget_response.png)
    sections:
      - blocks:
          - align: 'center_left'
            content: |
              ### Widget Response {.heading}
            scrollable: false
          - flex: 3
            content: '![widget_response](assets/widget_response.png)'
            scrollable: false
        type: 'section'
    notes: []
    assets:
      - path: '.superdeck/generated/thumbnail_8I3fvDqR.png'
        width: 512
        height: 288
  - key: 'wcrXMfUu'
    options:
      style: 'demo'
    markdown: |-
      {@lightControl
        kind: widget
        prompts:
          - Dim the lights by 20
          - Increase by 35
          - Turn off the lights
          - Set it to 80
          - Lower by half
          - Max brightness
      }
    sections:
      - blocks:
          - name: 'lightControl'
            scrollable: false
            type: 'widget'
            kind: 'widget'
            prompts:
              - 'Dim the lights by 20'
              - 'Increase by 35'
              - 'Turn off the lights'
              - 'Set it to 80'
              - 'Lower by half'
              - 'Max brightness'
        type: 'section'
    notes: []
    assets:
      - path: '.superdeck/generated/thumbnail_wcrXMfUu.png'
        width: 512
        height: 288
  - key: 'pNxPyfLK'
    options: {}
    markdown: '## What if the tool to use is a widget schema?'
    sections:
      - blocks:
          - content: '## What if the tool to use is a widget schema?'
            scrollable: false
        type: 'section'
    notes: []
    assets:
      - path: '.superdeck/generated/thumbnail_pNxPyfLK.png'
        width: 512
        height: 288
  - key: '5cGNbsJx'
    options: {}
    markdown: |-
      ### Experimental
      
      ```dart
      final schema = Schema.object(properties: {
        'textFields': Schema.array(
          description: 'A list of text fields',
          items: TextFieldSchemaDto.schema,
          nullable: true,
        ),
        'dropdowns': Schema.array(
          description: 'A list of dropdowns',
          items: DropdownSchemaDto.schema,
          nullable: true,
        ),
        'colorPickers': Schema.array(
          description: 'A list of colors pickers',
          items: ColorPickerDtoSchema.schema,
          nullable: true,
        ),
      });
      
      ```
    sections:
      - blocks:
          - content: |-
              ### Experimental
              
              ```dart
              final schema = Schema.object(properties: {
                'textFields': Schema.array(
                  description: 'A list of text fields',
                  items: TextFieldSchemaDto.schema,
                  nullable: true,
                ),
                'dropdowns': Schema.array(
                  description: 'A list of dropdowns',
                  items: DropdownSchemaDto.schema,
                  nullable: true,
                ),
                'colorPickers': Schema.array(
                  description: 'A list of colors pickers',
                  items: ColorPickerDtoSchema.schema,
                  nullable: true,
                ),
              });
              
              ```
            scrollable: false
        type: 'section'
    notes: []
    assets:
      - path: '.superdeck/generated/thumbnail_5cGNbsJx.png'
        width: 512
        height: 288
  - key: 'aJu8RjyT'
    options:
      style: 'demo'
    markdown: |-
      {@widgetSchema
        kind: widget
        prompts:
          - Change top colors
          - Change font
          - Change all colors
          - Change everything
      }
    sections:
      - blocks:
          - name: 'widgetSchema'
            scrollable: false
            type: 'widget'
            kind: 'widget'
            prompts:
              - 'Change top colors'
              - 'Change font'
              - 'Change all colors'
              - 'Change everything'
        type: 'section'
    notes: []
    assets:
      - path: '.superdeck/generated/thumbnail_aJu8RjyT.png'
        width: 512
        height: 288
  - key: '3kW1wOHd'
    options: {}
    markdown: '## The future of UI might be orchestrating user experiences rather than creating it.'
    sections:
      - blocks:
          - content: '## The future of UI might be orchestrating user experiences rather than creating it.'
            scrollable: false
        type: 'section'
    notes: []
    assets:
      - path: '.superdeck/generated/thumbnail_3kW1wOHd.png'
        width: 512
        height: 288
  - key: 'UqCN11cB'
    options: {}
    markdown: |-
      ### Thank you
      
      Leo Farias
      @leoafarias
      (GitHub, Twitter/X)
    sections:
      - blocks:
          - content: |-
              ### Thank you
              
              Leo Farias
              @leoafarias
              (GitHub, Twitter/X)
            scrollable: false
        type: 'section'
    notes: []
    assets:
      - path: '.superdeck/generated/thumbnail_UqCN11cB.png'
        width: 512
        height: 288
